{"./":{"url":"./","title":"Welcome!","keywords":"","body":"Welcome! Easy Testing 是一个在线考试系统。这里是它的文档， 总共包括三大部分：教师用户手册、学生用户手册与设计文档。 教师与学生用户手册分别介绍教师客户端（加上服务端）与学生客户端的使用方法， 解答各自会遇到的一些常见问题。 设计文档解释整个系统的设计思路、软件的模块结构、数据库的模型等。 建议教师用户阅读教师用户手册，选读学生用户手册； 建议学生用户阅读学生用户手册。建议软件开发人员首先阅读用户手册以了解系统功能， 再阅读设计文档以熟悉底层实现。 概述 EasyTesting 是一个自动化的在线考试平台，主要针对 Python 课程测验，但在简单的修改后亦可为其他课程的考试服务。其允许教师出题，发布考试，考试结束后查看学生成绩统计信息等；允许学生在考试发布后登录作答，限时提交答案。系统主要由三部分组成： 考生客户端、教师客户端、服务端软件。两个客户端软件分别为两种角色服务，各自通过网络连接服务端软件，而服务端软件主要操作数据库，为客户端的功能提供支持。 Apache-2.0 Licensed | Copyright © 2022-present Euan Mactavish            Last Updated 2022-03-11 15:15 "},"teacher_guide/introduction.html":{"url":"teacher_guide/introduction.html","title":"简介","keywords":"","body":"这是 Easy Testing 系统的教师客户端与服务端的用户手册， 供教师（包括管理员）查阅。 Apache-2.0 Licensed | Copyright © 2022-present Euan Mactavish            Last Updated 2022-03-06 22:10 "},"teacher_guide/deployment.html":{"url":"teacher_guide/deployment.html","title":"部署指南","keywords":"","body":"先介绍系统的部署。Easy Testing 的服务端与教师客户端是打包在一起的， 这打包文件和学生客户端打包文件一起在 GitHub Releases 发布。 根据操作系统、CPU 架构选择需要的版本下载即可。 首先要安装 MySQL 数据库，建议版本 5.7。 安装步骤参考官网文档。 然后将前面下载的压缩包解压至任意位置，其中包括： ├── EasyTesting 服务端主程序 ├── server-config.yaml 服务端主程序的配置文件 ├── favicon.ico 软件图标 ├── index.html 教师端主页面 ├── sql MySQL 脚本 │ ├── setup.sql 创建数据库的脚本 │ └── test.sql 插入测试数据的脚本 └── static 教师端主页面的静态文件 ├── css 样式文件 │ ├── app.4c2aef82.css │ ├── chunk-019156c7.a8088982.css │ ├── chunk-07c1fcd4.04dea0eb.css │ └── ... ├── fonts 字体文件 │ ├── element-icons.535877f5.woff │ └── element-icons.732389de.ttf ├── img 图片 │ ├── 404.a57b6f31.png │ ├── 404_cloud.0f4bc32b.png │ ├── avatar.ecba1844.gif │ └── ... └── js javascript 脚本文件 ├── app.82de0e6e.js ├── app.9d60ec40.js ├── chunk-019156c7.b0ca593f.js └── ... 其中 static 文件夹是前端自动打包的，内部文件名与文件数未必与上面的一致。 server-config.yaml 是关键的配置文件，内部的属性都有注释， 如果仅用于测试，仅需修改数据库 dsn 的用户名与密码（即替换掉 root:12345）。 记得设置好文件权限： $ sudo chmod -R 644 your_path_to_folder/easy_testing $ sudo chmod 755 your_path_to_folder/easy_testing/EasyTesting 接下来执行数据库脚本 setup.sql，参考官网文档进行。 如果需要测试数据，还可接着执行 test.sql。 最后进入文件夹根目录启动服务端主程序（因为程序会在当前工作目录下查找配置文件）， $ cd your_path_to_folder/easy_testing $ ./EasyTesting 正常启动后终端会出现日志，类似于： [GIN-debug] [WARNING] Running in \"debug\" mode. Switch to \"release\" mode in production. - using env: export GIN_MODE=release - using code: gin.SetMode(gin.ReleaseMode) [GIN-debug] GET /teacher_auth --> github.com/appleboy/gin-jwt/v2.(*GinJWTMiddleware).LoginHandler-fm (5 handlers) [GIN-debug] GET /student_auth --> github.com/appleboy/gin-jwt/v2.(*GinJWTMiddleware).LoginHandler-fm (5 handlers) [GIN-debug] GET / --> github.com/gin-gonic/gin.(*RouterGroup).StaticFile.func1 (5 handlers) [GIN-debug] HEAD / --> github.com/gin-gonic/gin.(*RouterGroup).StaticFile.func1 (5 handlers) [GIN-debug] GET /favicon.ico --> github.com/gin-gonic/gin.(*RouterGroup).StaticFile.func1 (5 handlers) [GIN-debug] HEAD /favicon.ico --> github.com/gin-gonic/gin.(*RouterGroup).StaticFile.func1 (5 handlers) [GIN-debug] GET /static/*filepath --> github.com/gin-gonic/gin.(*RouterGroup).createStaticHandler.func1 (5 handlers) [GIN-debug] HEAD /static/*filepath --> github.com/gin-gonic/gin.(*RouterGroup).createStaticHandler.func1 (5 handlers) [GIN-debug] GET /ping --> github.com/gonearewe/EasyTesting/handlers.PingHandler (5 handlers) [GIN-debug] GET /hello --> github.com/gonearewe/EasyTesting/handlers.HelloHandler (6 handlers) [GIN-debug] GET /cache --> github.com/gonearewe/EasyTesting/handlers.GetCacheHandler (6 handlers) [GIN-debug] PUT /cache --> github.com/gonearewe/EasyTesting/handlers.PutCacheHandler (6 handlers) 为了调试方便，可以把 stdout 和 stderr 都重定向到文件中并让程序后台运行： $ nohup ./EasyTesting &> debug.log & Windows 平台注意终端冻结问题假如你在 Windows 10 平台下运行服务端，则要尤其注意：终端默认会在你点击它，同时应用程序有输出时，直接冻结程序。 通常只需要按下 Esc 或回车就能恢复程序，但倘若没有注意到这个问题，也许会导致大量的客户端连接超时 （报错：timeout of 5000ms exceeded）。这并非是软件自身的 bug，而是 Windows 10 的问题。 详情参见 Why is my command prompt freezing on Windows 10?。 解决方法是在终端标题栏上右键，菜单选择默认值或属性（默认值会应用于所有终端），取消勾选快速编辑模式， 确定并重启终端。 现在即可在浏览器上访问 http://localhost:9000 进入教师端（如果你没有修改默认端口号的话）。 test.sql 提供的教师用户有： 工号 姓名 密码 0 root ET000 2010301800 张三 Scala 2012550921 李四 K_On 如果服务器在启动时出现： Error 1292: Incorrect datetime value: '0000-00-00' for column 'end_time' 说明是 MySQL 禁用了 datetime 类型的零值。 可以通过在 MySQL console 中输入 SELECT @@GLOBAL.sql_mode; 查看 全局的 sql_mode，它可能包括这些内容： ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION 我们只需要删除其中的 NO_ZERO_IN_DATE 与 NO_ZERO_DATE，通过重新全局设置 sql_mode： SET GLOBAL sql_mode = 'ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION'; 参考了 Stackoverflow 上的问题 MySQL Incorrect datetime value: '0000-00-00 00:00:00' Apache-2.0 Licensed | Copyright © 2022-present Euan Mactavish            Last Updated 2022-03-10 16:33 "},"teacher_guide/login.html":{"url":"teacher_guide/login.html","title":"登录界面","keywords":"","body":"教师客户端的登录界面如下所示： 登录界面有一个包含三项输入的对话框。其中的服务器地址为部署的服务端软件的地址。 例如，服务端本地部署时默认地址为 http://localhost:9000；当教师端从局域网的其他设备访问时， ip 地址可通过路由器等查看。冒号后的端口号与服务端配置文件中的 port 属性一致。 教师还需正确填写自己的工号与密码。密码项默认不显示明文，点击右侧的“小眼睛”图标可以切换显示模式。 填好后点击登录按钮即可进入主界面。 Apache-2.0 Licensed | Copyright © 2022-present Euan Mactavish            Last Updated 2022-03-10 15:40 "},"teacher_guide/structure.html":{"url":"teacher_guide/structure.html","title":"基本界面结构","keywords":"","body":"教师客户端界面如下图所示。 左侧是导航菜单（NavMenu），导航菜单上方是系统 LOGO 与名称， 下方是树形结构的页面导航，在其上用鼠标左键点击即可跳转到对应页面。 无论跳转到哪一个页面，导航菜单都会固定在屏幕侧边；滚动长页面时，菜单也不会随滚轮运动。 通过点击导航菜单右上角的按钮，可以在菜单的两种显示模式间来回切换。 更瘦的显示模式隐去了页面导航的名称，鼠标悬浮在对应图标上时即会展示子菜单或页面名称。 使用Ctrl+鼠标滚轮可以缩放页面，当缩放比例过大时，导航菜单会消失； 此时点击导航切换按钮，菜单会重新出现，同时右侧界面上出现黑色透明的遮罩层（Modal）， 点击遮罩层即会退出菜单。 导航切换按钮同一行右边依次是面包屑（Breadcrumb）与带下拉箭头的动态头像（Avatar）。 它们都会出现在各个页面上方，但是滚动长页面时，它们并不固定。 面包屑会显示当前页面的所在路径，这对于深度嵌套的页面很好用， 不过本客户端仅有试题管理模块包含一级子菜单，所以作用不大。 单击头像即可打开一个小下拉菜单，由上到下依次是： 首页：跳转至首页 个人信息：打开编辑个人信息对话框 文档：跳转至在线文档 关于：提供关于本软件的基本信息 退出登录：注销当前账号的登录状态，并跳转至登录界面 编辑个人信息对话框包含三个输入项：工号、姓名、密码。 工号与姓名项默认显示当前账号的对应信息，密码项则不显示。 如果你要修改工号或姓名，作出所需的修改，并点击对话框右下的修改按钮。 当且仅当你要修改密码时才填写新密码，否则留空即可。 工号与姓名标签文本左侧的红色星号也表明只有它两个是必填项， 如果它们有任一为空，在确认修改时，对话框会拒绝提交并进行提醒。 如果中途点击对话框右上角的关闭符号或右下角取消按钮，修改则不会被保存。 点击背景的遮罩层不会有任何作用（不会退出对话框）。 点击修改按钮后无论修改成功与否都会在界面的上半部分弹出对应的消息（Message）。 消息居中布局，悬浮显示，经过几秒就会自动消失，也可通过点击右侧关闭符号手动关闭。 消息的背景色随消息类型而变（错误消息为红色、成功消息为绿色等）。 对话框（Dialog）与消息（Message）对话框与消息的上述特性对本客户端的其他页面同样适用。 界面剩下的主体区域是页面，它随导航菜单中的选择而变。 不同的页面承担不同的功能，但也共享一些相同的组件， 接下来将逐个介绍这些页面。 Apache-2.0 Licensed | Copyright © 2022-present Euan Mactavish            Last Updated 2022-02-09 19:39 "},"teacher_guide/students.html":{"url":"teacher_guide/students.html","title":"学生管理模块","keywords":"","body":"首先介绍学生管理页面。 页面由上到下分别为操作栏、表格（Table）与分页器（Pagination）。 操作栏 搜索功能 操作栏的左半部分是搜索组件。学生管理页面的搜索组件带有三个搜索框， 可分别检索学号、姓名与班号。它们全都支持部分检索， 但是学号和班号只支持前缀检索。 填写检索条件后回车或点击搜索按钮即可开始检索。 只填写一个搜索框，而其他留空便是单个检索； 也可填写多个，实施联合检索，多个检索条件间是布尔与的关系。 清空所有搜索框再进行检索，便会显示所有数据，这也是刚进入页面时的初始状态。 假如有如下示例数据： 学号 姓名 班号 2019501848 小明 06330058 2019501849 小红 06330059 2018201826 阿明 05370014 则会有这样的检索情境： 学号检索2019得到小明和小红 学号检索2019，同时班号检索06330058得到小明 姓名检索明得到小明和阿明 学号检索018201826没有一条记录，虽然阿明学号包含它，但它不是前缀 执行检索后表格显示加载动画，稍后便会更新数据。 如果网速较快，加载动画可能会一闪而过。 如果网络异常或服务器故障，则会弹出错误消息，表格也不会更新。 添加功能 操作栏的右半部分有添加、删除、导入、导出四个按钮。 点击添加按钮会进入添加功能对话框。 这里的对话框也十分简单。仅需提供必要的三项信息便可创建一个学生。 创建成功后表格也会自动更新，将会显示新创建的学生。 如果新创建的学生的学号已存在于系统中，创建会失败。 注意，学号与班号并非仅包含数字，任何字符都是可以的。 提供正确的信息只有记录进学生管理模块的考生才能参加考试， 考生登录考试时需要提供与此处一致的学号与姓名。 删除 删除功能用于批量删除表格本页的一到多行记录。 表格每行最左端都有一个单选框， 点击它即可在选中本行与取消选中本行间进行切换。 如本页文档最上方的图片所示，多行记录可被同时选中。 点击表头最左端的单选框还可在选中全部与取消选中全部间进行切换。 点击删除按钮即会删除当前选中的所有行记录。 不过，在此之前，会弹出一个要求确认的对话框， 它会提示将要被删除的学生信息以供核对，此时取消或关闭对话框即可反悔。 成功删除后表格也会随之更新。 谨慎删除被删除的学生无法参加后续考试，其以前的作答记录也会被随之删除。 并且删除操作基本无法撤销，记录会永久丢失。 导出 导出功能可将满足当前检索条件的所有学生记录写入一个 Excel 文件（xlsx 格式）。 只需点击按钮，浏览器很快就会弹出文件的下载请求。 打开文件即可在第一个 Sheet 找到全部的数据。 导入 添加功能仅在创建单个学生时较为方便，而批量创建学生需要用到导入功能。 它和导出功能正好相反，它允许用户从一个 Excel 文件（xlsx 格式）中导入大量的学生记录。 如果该 Excel 文件包含多个 Sheet，它会检查每一个 Sheet 并合并从中读取的记录。 不过，它对于这个文件有一定的格式要求。每一个 Sheet 都必须包含三列数据且有一个表头： class_id、student_id、name，数据必须安排在对应的表头下且单元格格式都为常规或文本类型。 事实上，导入功能足够智能，可以自动跳过空单元格，也能接受任意的列顺序， 如下所示的数据也可正确读取，但用户最好还是按照规范的格式提供数据以避免潜在的问题。 导入文件的模板导出功能自动生成的文件完美遵循格式要求，可以由导入功能直接读取。 它能作为导入文件的模板，供用户参考或在其基础上粘贴学生数据。 点击导入按钮会弹出文件选择对话框，在此选好单个 Excel 文件后， 会弹出要求确认的对话框以供核验，确定后所有记录会被一次性提交至服务器保存。 表格 表格都有一个表头，描述各个列的数据类型。 ID 列显示各条记录的全局唯一的 id，它会随之新记录的创建不断递增。 最右侧的一列是操作列，不同于页面最上方的操作栏，这里的操作是针对某一行的。 点击某一行的编辑按钮即可进入编辑对话框。 它与添加对话框十分相似，不过这里的表单默认不是空的， 而是填着要编辑的那行记录的对应信息。 可以在此作出一些改动，并点击确定保存修改。 点击某一行的删除按钮即可单独删除该行记录。 这里同样会先出现一个悬浮在删除按钮下方的弹出对话框（popover）要求确认。 剩下的列便显示记录的各项信息。 快速开始编辑你也许注意到了，这些信息的字体是蓝色的，且鼠标指针悬浮在上面时会变形， 其实它们都是可点击的，点击它们等效于点击所在行的编辑按钮。 鼠标指针放到表格两列间的分割线上时，指针会变成分隔图标， 此时按住左键并左右拖动即可调整两列的宽度。 分页器 学生的记录数通常很大，不可能在一页表格中得以全部显示， 所以表格默认都是分页展示的。 第一次打开页面或完成检索后，表格显示的都是第一页。 分页器会显示总记录数、当前所在页数，并允许用户改变每页记录数和 跳转到指定页数。 Apache-2.0 Licensed | Copyright © 2022-present Euan Mactavish            Last Updated 2022-02-10 15:45 "},"teacher_guide/teachers.html":{"url":"teacher_guide/teachers.html","title":"教师管理模块","keywords":"","body":"教师管理页面是仅有管理员可访问的页面， 普通教师无法在导航菜单上看到这一页面。 管理员可在此维护所有教师（包括自己和其他管理员）的信息。 同样是做用户管理，可以发现教师管理页面与先前介绍的学生管理页面 十分相似，重复的部分将不再介绍。 操作栏的搜索组件包含两个搜索框，全都支持部分检索，但工号只支持前缀检索。 添加对话框与学生管理的类似，但有一个特别的管理员权限标签， 若勾选它，创建的便是又一个管理员，否则创建的是普通教师。 教师名单可通过导出功能生成，但考虑到实际应用情景， 教师管理不支持导入功能。 管理员可以删除其他任何教师，但不能删除自己。 谨慎删除删除教师的后果比删除学生更加严重，它会导致该教师创建的试题、 考试都被随之删除。最好不要删除任何一个曾在系统中有积极活动的教师。 编辑教师时如果在表单的密码项留空，则不会修改该教师的密码， 如果填入了字符，则其会成为该教师的新密码。 此页面的小问题受限于前端的权限管理技术，本页面不支持刷新、从地址栏访问等操作， 否则会显示 404 错误，此时从地址栏访问首页即可解决。如果需要刷新表格，直接清空所有搜索框并点击搜索即可。 Apache-2.0 Licensed | Copyright © 2022-present Euan Mactavish            Last Updated 2022-02-10 16:23 "},"teacher_guide/questions.html":{"url":"teacher_guide/questions.html","title":"试题管理模块","keywords":"","body":"试题管理模块包括五个页面（对应于五种题型）： 单选题、多选题、填空题、判断题、代码阅读题和编程题。 这些页面也都是基于表格的，大同小异， 文档主要介绍多选题页面和编程题页面，其他可依此类推。 多选题 所有题目都只支持按出题者工号进行搜索，且同样只支持前缀检索。 点击添加按钮就会弹出对应的对话框。 可以看到所有题目都需要一个题干， 选好选项数后对话框还会要求填写对应数量的选项内容以及正确答案。 题干和各个选项的内容都支持 Markdown。 Markdown 是一种简单的富文本格式，可以在这里学习其语法。 对话框内置了一个简易的 Markdown 编辑器。 上面有常用的语法按钮，右下角可切换是否显示右侧的预览区， 预览区的效果基本与学生在考试时看到的效果一致。 事先保存好 Markdown意外退出对话框或对话框提交失败后，里面的内容都会丢失。 并且由于界面大小受限，对话框字体较小，不适宜在此长期编写题目。 所以建议事先使用其他 Markdown 编辑器 （例如 Typora）编写题目并保存， 再将题干等粘贴到对话框中，仅用内置编辑器做些小修改。 表格显示了多选题的基本信息，包括出题者工号、题干和各个选项的内容。 注意到题干等因为字符过多，无法完全显示， 鼠标指针悬浮在其上可以查看更多的文本， 如果要查看完整的文本，只能进入编辑对话框。 多选题的选项数量是各有不同的，对于选项数不足七的题目， 多余的选项在表格中以一个写着“无”的灰色标签（Tag）占位。 多选题有多个正确选项，正确选项左侧会出现一个写着“正解”的绿色标签。 如果是单选题，每道题只会有一个“正解”标签。 每道题都有一个难度系数，其值在 [0.0, 1.0] 区间内， 值越大说明该题越难；它根据大量考生的作答情况计算而来，当样本数过少时显示为空， 修改题目也会导致难度重置。 编程题 编程题的编辑对话框如下所示。 如果不勾选需要输入，考试时本题的判题程序就会跳过输入阶段。 否则，用户必须填写输入方式和输入的内容， 考试时本题的判题程序会根据此题的配置将给定内容以给定方式提供给考生编写的程序。输出方式项和正确输出项同理， 只有当考生编写的程序的输出与正确输出相同，该考生才能得分。 事先测试编程题编程题较为复杂，为了避免设置不当导致的问题，最好进行事先测试。 创建一个考试，调大编程题数目以确保能随机到要测试的题目， 然后用自己编造的考生登录学生客户端作答，最后检查成绩是否符合预期。 代码初始模板项的内容会作为学生客户端该题的编辑器初始内容。 可以通过它向考生提供关于本题的提示（用注释），或给予一部分代码框架。 在表格中，对于输入一列，如果输入方式为从文件中读取， 则输入内容左侧会出现写有文件的标签；若为从命令行读取， 则出现写有命令行的标签；假如没有输入，出现写有无的标签。 对于正确输出一列同理，只不过正确输出是一定会有的，不会出现无。 填空题与代码阅读题 填空的答案要求顺序完全一致填空题与代码阅读题会给考生一到多个空来填写， 判题程序比对答案时要求答案顺序严格一致，否则不得分。 用户出题时要注意避免答案顺序任意的情况。 下面这道题出的不好： 问题：面向对象的三个基本特征是__、__和__。 答案：封装、继承、多态 假如考生答： 继承、封装、多态 则只有最后一个空能得分。 用户应当避免这样的题目，或引入其他约束固定答案顺序。 Apache-2.0 Licensed | Copyright © 2022-present Euan Mactavish            Last Updated 2022-02-28 15:10 "},"teacher_guide/exams.html":{"url":"teacher_guide/exams.html","title":"考试管理模块","keywords":"","body":"考试管理模块允许用户创建、查看、修改、删除线上考试， 还允许在一个单独的页面查看成绩分析。 对考试的管理 一场考试包含以下信息：考试的开始时刻与结束时刻、 考生的考试限时以及各种题型的总小题数、每小题分数。 在创建与编辑对话框中，开始时刻与结束时刻都支持直接的文本编辑， 但更推荐通过时间选择器（点击输入框后弹出）设置； 其他的输入项都必须为正整数，既可以通过数字输入框左右的加号、减号调节， 又支持直接的文本编辑；个别输入项使用固定值，无法改变； 对话框最后一项为总分，它是根据上面的各种题型的题数与分数自动计算的， 只有总分为 100 分时，对话框才能被提交。 理解“考试限时”的意义考试限时不等于结束时刻减开始时刻，而是应当小于它。因为学生参加考试的时间是弹性的，他可以选择在开始时刻与结束时刻间的任意时刻登录。 每个学生的答题时间都是从各自的登录作答时刻开始计算的。但是结束时刻之后服务器将不再接受答卷的提交。 教师应当引导学生在考试开始后尽快登录作答。 任一考试必处于三个状态之一中：已结束意味着当前时刻在该考试结束时刻之后，进行中意味着现在处于开始时刻与结束时刻间， 未开始则意味着开始时刻在当前时刻后。 表格中用三种不同颜色的标签分别标识这三种状态。 注意进行中的考试不允许编辑和删除，而已结束的考试只能删除、不能编辑。 一般来说，新创建的考试必处于未开始状态， 随着时间流逝，考试自动变为进行中，此时考生才可以登录作答。 为了保证试题的一致性，当有考试在进行中时，试题管理模块将被禁用。 由于考试的信息较多，表格一开始只展示一部分。 通过点击某一个考试的详情列的下拉箭头，可以打开折叠的组件， 查看更多信息。如果该考试正在进行中，组件最下方会出现查看考生名单字样， 点击即会弹出考生名单对话框；如果该考试已结束， 组件最下方则会出现写有查看考生作答情况的按钮，点击就会进入考试结果页面。 查看考试结果 对结果的分析是以考试为基本单位的，不支持任何其他筛选条件。 在图示模式下，柱状图会展示选中的考试中考生成绩的区间分布， 不同的考试使用不同的颜色标识，各颜色代表的考试 ID 可在图例中查看； 在表格模式下，选中的考试中具体的考生成绩得以呈现， 最终得分显示在表格最后一列，分数区间以颜色区分。 分数区间 表格中的颜色 [0,60) 红色 [60,80) 橙色 [80,90) 灰色 [90,100] 绿色 ) 这里同样有十分实用的导出功能， 允许导出当前所选中的考试的所有成绩信息到一个 Excel 文件（xlsx 格式）中去。 Apache-2.0 Licensed | Copyright © 2022-present Euan Mactavish            Last Updated 2022-02-11 18:56 "},"teacher_guide/faq.html":{"url":"teacher_guide/faq.html","title":"FAQ","keywords":"","body":" Q: 表格的批量删除功能仅能删除当前页的记录，我该如何快速删除所有记录？ 例如，删除所有的学生记录。 A：如果记录数不是非常大（几百条以下），最简单的方法是在页面对应的分页器中选择 每页显示 50 条记录（最大值），然后点击表格表头最左侧的单选框全选所有记录， 再批量删除；始终有效但不稳妥、不推荐的方法是删除数据库中的对应的表。 Q：我忘记了自己的密码，有办法找回它吗？ A：不可能。因为密码原文从未被存储在任何地方，为了安全考虑， 系统保存的是基于密码原文计算的字符串，详情参考 Best way to store password in database 等资料。 但是，你可以通过管理员重新设置你的密码，这样一来你将能用新密码登录。 Q：测试用的考试无法被删除，导致试题管理被锁住，有没有办法强行删除一个考试？ A：可以在数据库中直接删掉该考试。另外，测试用的考试可以把时间设置得短一些，这样就不会有麻烦了。 Q：考试结果页面中的图示分析功能太单一了，如何能更好地分析成绩？ A：为了控制系统复杂度，教师客户端仅提供基本的分析功能。 如果需要多样化的分析，建议将对应的成绩信息导出到 Excel 文件中， 借助 Office 软件自带的一系列图表工具即可轻松实现。 Q：有学生在考试中遭遇突发情况（如断网），未能提交完整答卷， 其作答已人工批改，如何修改系统中的成绩为他的真实成绩？ A：系统中的成绩不允许编辑，因为其要与作答记录等保持一致。 但是成绩可以导出为 Excel 文件，你可以在其中进行修改并以它作为上传教务系统的依据。 Q：有学生客户端报错：timeout of 5000ms exceeded，怎么办？ A：这是常见的网络超时错误，但是超时说明起码还是能连接到服务端的。 可以检查一下是不是网络状况不好，假如错误时有时无，那只要保存答卷还能至少成功一次，就不必担心。 倘若大量学生客户端都出现这个错误，应当检查一下服务端是否还工作正常，尤其注意一下部署指南 中提到的终端冻结问题。 Apache-2.0 Licensed | Copyright © 2022-present Euan Mactavish            Last Updated 2022-03-06 22:12 "},"design/introduction.html":{"url":"design/introduction.html","title":"系统总览","keywords":"","body":"建议开发者在阅读设计文档前先阅读两个用户手册， 在用户手册中提到的概念在此不会重新解释。 系统为教师和学生两种用户分别设计了客户端， 而它们的核心功能主要由一个服务器支持， 服务器在后台还会连接一个数据库。 系统的技术选型如下： 服务器： Gin，Go 语言高性能服务器框架 Viper，Go 语言配置（configuration）管理库 Gorm，Go 语言的 ORM 库 MySQL，开源的数据库管理软件 客户端： PyQt5，Python 语言的 Qt5 绑定 Vue，一套用于构建用户界面的渐进式框架 ElementUI，简单好用的 Vue 组件库 教师客户端是用 Vue 构建的前端应用，可在浏览器上使用。 而学生客户端为了满足特定需要（主要是反作弊），是使用 PyQt5 创建的桌面应用，但页面本身为了方便开发仍用 Vue 构建。 上面的技术选型只涵盖了主要的依赖，全部依赖请参见各自源码中的依赖文件， 在本设计文档的对应章节中也会提到其中的一些。 系统源码由 git 作版本管理，仓库主要在 GitHub 托管。master 分支放源码，gh-pages 分支放文档。 master 分支文件结构如下： . ├── LICENSE ├── README.md ├── build 用于构建的脚本 │ ├── build_student.bat │ └── build_teacher_and_server.bat ├── img 供 README.md 使用的图片 │ ├── jb_beam.svg │ ├── logo.png │ ├── ... │ └── teacher_client_demo_5.png ├── server 服务端源码 │ ├── init.go │ ├── main.go │ ├── go.mod │ ├── ... │ ├── dao │ │ ├── bfq.go │ │ ├── ... │ │ └── tfq.go │ ├── handlers │ │ ├── bfq.go │ │ ├── ... │ │ └── tfq.go │ └── utils │ ├── cache.go │ ├── password.go │ └── utils.go ├── student_client 学生客户端源码 │ ├── pyqt PyQt 部分 │ │ ├── Pipfile │ │ ├── ... │ │ ├── local_server.py │ │ ├── main.py │ │ └── main.spec │ └── vue Vue 部分 │ ├── src │ │ ├── App.vue │ │ ├── main.js │ │ ├── permission.js │ │ ├── ... │ │ ├── api │ │ │ └── index.js │ │ ├── utils │ │ │ ├── cookie.js │ │ │ ├── ... │ │ │ └── validate.js │ │ └── views │ │ ├── 404.vue │ │ ├── home │ │ │ └── index.vue │ │ └── login │ │ └── index.vue │ ├── ... │ ├── package.json │ └── vue.config.js ├── teacher_client 教师客户端源码 │ ├── ... │ ├── src │ │ ├── main.js │ │ ├── permission.js │ │ ├── App.vue │ │ ├── ... │ │ ├── api │ │ │ ├── exam.js │ │ │ ├── ... │ │ │ └── user.js │ │ └── views │ │ ├── 404.vue │ │ ├── exam │ │ │ ├── chart.vue │ │ │ ├── ... │ │ │ └── resize.js │ │ ├── login │ │ │ └── index.vue │ │ ├── ... │ │ └── teacher │ │ └── index.vue │ └── vue.config.js └── test 用于测试的脚本 ├── Pipfile ├── Pipfile.lock ├── student.py └── teacher.py 72 directories, 260 files Apache-2.0 Licensed | Copyright © 2022-present Euan Mactavish            Last Updated 2022-03-11 15:33 "},"design/database.html":{"url":"design/database.html","title":"数据库","keywords":"","body":"首先介绍系统的后台数据库， 这有助于我们了解系统的数据模型（Model）。 数据库的 E-R 图如下所示，可以下载该 svg 图片放大查看。 创建它的 sql 文件可在源代码中找到（参见 introduction 中介绍的文件结构）。 student 与 teacher 是为两种用户分别准备的表（Table）。 它们各有几个复合索引（Composite Index），这用于加速教师客户端的列表查询。 例如，我们可以确保下列查询全都走索引。 SELECT * FROM `student` WHERE student_id LIKE '20%' AND class_id LIKE '10%' AND name LIKE '%小%' SELECT * FROM `student` WHERE student_id LIKE '20%' AND class_id LIKE '10%' SELECT * FROM `student` WHERE student_id LIKE '20%' SELECT * FROM `student` WHERE class_id LIKE '10%' AND name LIKE '%小%' SELECT * FROM `student` WHERE class_id LIKE '10%' SELECT * FROM `student` WHERE name LIKE '%小%' teacher 的 password 与 salt 字段用于支持密码登录， 详情将于 server 文档 中介绍。 exam 与 mcq、maq、bfq、tfq、crq、cq 分别代表考试与各种题型。 对应于每种题型都有记录考生作答的表：mcq_answer、maq_answer、bfq_answer、tfq_answer、crq_answer 和 cq_answer， 它们都通过各自的外键连接不同 id 的题目， 其中的一些（如 tfq_answer）还记录有对应 id 题目的正确答案以加速答案比对过程（避免了 join 表）。 因为一个考生可能参加过多场考试，所以 answer 系列的表不能仅靠 student_id 区分考生。 我们引入了 exam_session（即考试会话） 的概念，它由 exam_id 与 student_id 联合确定，并用于连接 answer 系列的表， 该表中的每一条记录都表示某学生参加了某考试。exam_session 中的 time_allowed 与对应 exam 中的同名字段一致，为冗余字段； 但其中的 start_time 表示的是对应学生进入考试的时刻，end_time 表示最后一次提交答卷的时刻，与对应 exam 中的同名字段意义均不同。 另外，exam_session 还有 score 字段，用于保存考生在某考试中的最终得分。 为了加速 sql 查询，整个数据库中使用了不少冗余字段。 其中的外键（如 publisher_teacher_id）都创建了 DELETE 与 UPDATE 的触发器，由数据库自动维护数据一致性。 而 answer 系列的表的冗余字段（正确答案）与 exam_session 表中的冗余字段 time_allowed 根据业务逻辑不会被修改，无需顾及一致性： answer 系列的表有存档（archive）性质，始装保存出题时刻的正确答案，事后修改的题目自然不会影响历史作答； exam_session 中的一条记录被创建就意味着对应考试已开始，而开始后的考试禁用修改。 唯一需要服务器软件手动维护一致性的情景是，在修改 student 表时同步更新 exam_session 表中的冗余字段 student_name。 Apache-2.0 Licensed | Copyright © 2022-present Euan Mactavish            Last Updated 2022-02-28 22:05 "},"design/api.html":{"url":"design/api.html","title":"接口文档","keywords":"","body":"接下来介绍系统的前后端接口。 接口相当于一道切面，可以明确地划分开前后端的职责， 本系统的接口通过 OpenAPI v3.0.0 规范描述，详细的描述文件见这里，可以通过 Swagger Editor 查看。这里仅仅对接口作一个概要的介绍。 OpenAPI 描述文件编辑器OpenAPI 的描述文件可以用 yaml 或 json 格式， 但无论如何，直接对着文本文件进行编辑效率都很低下。 我选用的带 UI 的编辑器是来自 Stoplight 的。 特殊 API 两个特殊的 API 是 GET ping 与 GET hello，主要用于测试。 ping 始终返回文本 pong，可以测试服务端是否在正常工作。 而 hello 仅支持已认证的用户访问，会返回用户 id（学生的学号或教师的工号），可以测试登录状态。 用户登录 API GET teacher_auth 接口用于教师的登录，提供参数 teacher_id 与 password。如果教师工号存在且密码正确，服务器将完成认证并返回一个 JSON Web Token。关于 JWT 的详细介绍可参考这里，简单来说，它包含三部分：Header、Payload 与 Signature。 Payload 可携带明文信息供客户端使用，教师的 Token Payload 中包含： id: 教师的系统唯一 ID teacher_id: 工号 name：教师的姓名 is_admin：教师是否为管理员 为了保持登录状态（即让服务器相信“我就是XX”）， 客户端必须把 TOKEN 放进之后的接口请求中， 具体为首部字段 Authorization 中，以 Bearer 方式， 即 Authorization: Bearer 。 输入 Header、Payload 与一个密钥，利用指定的算法即可计算出 Signature， 因为密钥仅供服务器访问，所以计算仅有服务器能完成， 服务器就根据请求携带的 TOKEN 是否能通过验算进行认证。 GET student_auth 则是学生的登录接口，接受参数 student_id、 name 与 exam_id。学生登录特殊的地方在于不仅要学号与姓名正确， 还要求指定的考试正在进行（即当前时间处于该考试的开始时刻与结束时刻间）， 并且如果学生还未参加这场考试，则自动参加（即答题倒计时自接口访问成功开始计算）， 当然如果学生已经参加了，就只会返回一个 TOKEN（这种情况一般不会出现，因为 TOKEN 的 有效期都设置得很长，基本不会在考试期间过期）。 学生登录成功获得的 Token 的 Payload 中包含： student_id：学号 name：学生的姓名 class_id：学生的班号 exam_session_id：由当前学生 ID 和考试 ID 共同决定的系统唯一 ID exam_deadline：学生在这个考试中的作答截止时刻 除开 GET ping 与这两个登录认证 API， 其他的接口都要求 JWT 认证。并且教师与学生的可访问接口也是完全分开的 （唯一一个两用户均可访问的认证接口是 GET hello）。 教师客户端的其他 API mcq、maq、bfq、tfq、crq 与 cq 这六个接口都支持 GET、POST、PUT、DELETE 四大方法，分别用于单选题（Multiple Choice Question）、多选题（Multiple Answer Question）、填空题（Blank-Filling Question）、 判断题（True or False Question）、代码阅读题（Code Reading Question）与编程题（Coding Question）的管理（增删改查）。 teachers 与 students 接口同样支持四大方法，它们分别用于 教师用户和学生用户的增删改查。但是前者仅有管理员可以访问， 服务器通过 TOKEN Payload 中的 is_admin 字段认证管理员； 因为服务器读取 is_admin 字段之前仍会验证 Signature， 所以不必担心恶意请求篡改 is_admin 字段的问题。 PUT profile 同样是用来修改教师的接口，但它仅限于修改自己的信息， 并且不支持修改是否为管理员属性。 exams 接口同样支持四大方法，用于支持对考试的增删改查。 GET exams/ended 获得所有已结束考试的列表，因为它不返回考试的详细信息且列表一般不会很长， 所以不支持分页。GET exams/examinees 接受参数 exam_id， 返回指定考试的所有 exam session，同样不支持分页。 学生客户端的其他 API 教师客户端本质上是管理平台，所以相关的接口较多，而学生客户端的 API 就要少很多。 GET exams/my_questions 用于获取学生的试题。PUT exams/my_answers 则用于提交作答。 PUT cache 与 GET cache 分别用于存取缓存。服务端会为每一个 exam_session_id 准备一个字符串缓存， 其在考试期间保证不会过期，可以用来存任何东西。 事实上，客户端用它来存记录考生作答情况的程序内部结构（一个 json 对象）， 这样一来可以在中途退出重进后通过 GET cache 还原作答情况（试卷则可通过 GET exams/my_questions 重新获得）。 API 的生命周期 我们希望在有考试进行时禁用对题目的修改，也希望学生仅能在自己的作答时间内提交答案。 显然，这要求 API 有一定的生命周期（lifecycle），各种 API 的生命周期如下所示： 当然，这是由生命周期决定的可访问性，如果接口参数有误或不满足其他条件， 即使在生命周期内也会访问失败。 Apache-2.0 Licensed | Copyright © 2022-present Euan Mactavish            Last Updated 2022-03-02 22:59 "},"design/server.html":{"url":"design/server.html","title":"服务端","keywords":"","body":"在介绍完后台数据库与前后端接口后，服务端软件的处理逻辑已经跃然纸上了。 服务端需要响应教师端的 GET、POST、PUT、DELETE 请求，操作对应的数据库表； 当有考试进行时，它还要响应学生端，处理更为复杂的随机发题、保存作答、判分统计等请求。 源代码的文件结构 不过，在讨论这些流程逻辑之前，我们先来详细看看服务端源代码的文件结构。 . ├── init.go 初始化逻辑 ├── main.go 程序入口 ├── router.go HTTP 路由 ├── server-config.yaml 程序的配置文件 ├── go.mod 项目依赖文件 ├── go.sum 自动生成的项目依赖文件 ├── config.yml gormt 的配置文件 ├── middlewares 中间件模块 │ ├── middlewares.go 模块入口 │ ├── auth.go 认证与授权中间件 │ ├── check_exam.go 考试检查中间件 │ ├── cors.go CORS 中间件 │ ├── ratelimit.go 限流中间件 │ └── recovery.go 异常恢复中间件 ├── dao 数据访问模块 │ ├── bfq.go │ ├── common.go │ ├── cq.go │ ├── crq.go │ ├── dao.go │ ├── exam.go │ ├── exam_session.go │ ├── maq.go │ ├── mcq.go │ ├── student.go │ ├── teacher.go │ └── tfq.go ├── handlers Handlers 模块 │ ├── bfq.go │ ├── cache.go │ ├── cq.go │ ├── crq.go │ ├── exam.go │ ├── exam_session.go │ ├── hello.go │ ├── maq.go │ ├── mcq.go │ ├── ping.go │ ├── student.go │ ├── teacher.go │ └── tfq.go ├── models 数据模型模块 │ ├── my_answers.go │ ├── bfq.go │ ├── bfq_answer.go │ ├── cq.go │ ├── cq_answer.go │ ├── crq.go │ ├── crq_answer.go │ ├── exam.go │ ├── exam_session.go │ ├── maq.go │ ├── maq_answer.go │ ├── mcq.go │ ├── mcq_answer.go │ ├── student.go │ ├── teacher.go │ ├── tfq.go │ └── tfq_answer.go ├── sql 数据库脚本 │ ├── setup.sql 创建脚本 │ └── test.sql 插入测试数据的脚本 └── utils 辅助工具模块 ├── cache.go ├── password.go └── utils.go main.go 中的 main 函数是程序的入口，它会初始化 Gin 的 Engine 并设置中间件与路由， 最后进入 http.ListenAndServe 的无限循环。而在这之前，程序会依次初始化 Viper（读取配置参数），日志与 Gorm。 中间件位于 middlewares 文件夹中，主要包括日志、异常恢复、跨域、限流、鉴权与考试状态检查。路由则全在 router.go 中。 鉴权方案采用 github.com/appleboy/gin-jwt/v2， 它会对接口进行权限控制，鉴权工作流程具体参考 API 文档。 限流中间件采用 github.com/ulule/limiter/v3， 用于控制 RPS(Request Per Second) 以避免程序被大量请求击垮，RPS 限制值可在文件 server-config.yaml 中配置。 考试状态检查中间件实现了 API 文档中的教师客户端 API 的生命周期控制， 阻止教师在有考试进行或有考试未计算分数时对某些接口的访问，以确保数据一致性。 而学生客户端 API 的生命周期控制则在鉴权中间件中实现， studentAuthenticator 控制 GET student_auth 的生命周期， studentAuthorizator 控制其他 API 的生命周期。 handlers 模块中的函数大多是 gin.handlerFunc，被直接注册在路由中。 它们主要提取请求参数，验证参数，并调用 dao(Data Access Object) 模块的函数操作数据库完成请求。 dao 模块直接使用 Gorm 框架完成数据库的 CRUD 操作，并在需要的时候启用事务。 models 模块包含对应于数据库表的一堆结构体（Structure）， 它们是 gormt 根据先建好的数据库自动生成的， 不过我们在生成的结构体的基础上做了一些修改（如删除 password 字段的 json tag 以防止其被序列化给客户端）。 考试流程逻辑 现在，我们介绍一下考试流程逻辑。 考试的前提是录入了考生的名单并且题库中已有充足的试题，这分别通过 POST students 与 POST 完成。 然后一场考试将通过 POST exam 新建，这个 exam 包括 start_time 与 end_time 属性， 在这两个时刻间考生可通过 GET student_auth 获得授权并进入考试。 服务端会先插入一条 exam_session 记录，再按 exam 的各题型题数配置随机读取各张试题表中的记录组成试卷， 然后将初始作答情况（自然是空的）插入对应的 answer 系列的表，整个事务成功后该考生即进入了考试。 接下来考生将访问 GET exams/my_questions，服务端根据他在 answer 系列的表中记录即可反向查询到对应的试题信息（题干等）， 简单组织后即可交给考生。接着，客户端在考试过程中将周期性地访问 PUT exams/my_answers 与 PUT cache 以保存作答情况； 对于 PUT exams/my_answers，服务端将新的作答情况覆盖到他的 answer 系列的表中， 而对于后者，服务端将 request body 缓存到内存中。 客户端倘若中途退出重进，因为它本身不保存任何信息，要想恢复到退出前的状态必须依靠服务端保存的信息。 客户端需要通过 GET student_auth 重新获得授权（但不会重新执行进入考试的逻辑）， 再访问 GET exams/my_questions 读取自己的试卷，最后通过 GET cache 恢复作答情况至上次保存时。 之所以设计了 cache 接口而不是设计一个 GET exams/my_answers 接口， 是因为从数据库读回作答情况的逻辑相对更复杂。 在考试期间，教师仍可查询各项信息（包括正在参加考试的学生名单），但不可进行任何修改、删除操作。 最后，考试结束后，考生的 GET student_auth 接口会被 studentAuthenticator 拦截， 而其他所有接口都会被 studentAuthorizator 拦截。 但是此时教师的接口访问依然受限，这是因为这场考试还没有完成分数的计算。 为了避免冗余的计算，服务端没有在 PUT exams/my_answers 时同时计算该考生的分数， 而是把所有考生的分数计算放在该考试结束后。 在 xxx 号考试结束后，教师查看考试结果时第一次访问 GET exams/examinees?exam_id=xxx 会触发 xxx 号考试的分数计算逻辑。 服务端提取每一位考生的作答情况，将其与正确答案比对，计算并记录其最终得分。 在分数计算的同时，也会更新各题目的总答对分数与总分数，方便统计题目难度。 每一位考生的总分都计算完成后，服务端会标记该考试在数据库中的 scores_calculated 字段以避免分数计算逻辑被重复触发。 Apache-2.0 Licensed | Copyright © 2022-present Euan Mactavish            Last Updated 2022-03-11 16:09 "},"design/teacher_client.html":{"url":"design/teacher_client.html","title":"教师客户端","keywords":"","body":"接下来介绍教师客户端的设计。 教师客户端的需求总的来说都能用图与表来实现。那么最方便的客户端方案莫过于基于 vue-element-admin 二次开发。 它提炼了典型的业务模型，提供了丰富的功能组件，使用了稳健的技术栈，适用于简单 Vue 应用的快速开发。 不过，vue-element-admin 是大而全的方案，实际开发中初始模板用的是 vue-admin-template。这是一个极简的 vue admin 管理后台。它只包含了 Element UI & axios & iconfont & permission control & lint， 这些搭建后台必要的东西。在需要的时候，我们再从 vue-element-admin 中复制需要的模块。 源码文件夹结构如下： . ├── public 打包需要的静态文件 │ ├── favicon.ico 网页图标 │ └── index.html 单页 html ├── src 真正的源代码 │ ├── App.vue │ ├── main.js │ ├── permission.js 权限管理 │ ├── settings.js │ ├── api 单纯的 JS API 请求库 │ │ ├── exam.js │ │ ├── question.js │ │ ├── student.js │ │ ├── teacher.js │ │ └── user.js │ ├── assets 应用中引用的静态文件 │ │ ├── 404_images │ │ │ ├── 404.png │ │ │ └── 404_cloud.png │ │ ├── dashboard │ │ │ ├── exam.png │ │ │ ├── student.png │ │ │ └── teacher.png │ │ └── logo.png │ ├── components 通用组件 │ │ ├── Breadcrumb │ │ │ └── index.vue │ │ ├── GithubCorner │ │ │ └── index.vue │ │ ├── Hamburger │ │ │ └── index.vue │ │ ├── MarkdownEditor │ │ │ ├── default-options.js │ │ │ └── index.vue │ │ ├── Pagination │ │ │ └── index.vue │ │ └── SvgIcon │ │ └── index.vue │ ├── directive 通用的 Vue 指令 │ │ ├── clipboard │ │ │ ├── clipboard.js │ │ │ └── index.js │ │ ├── el-drag-dialog │ │ │ ├── drag.js │ │ │ └── index.js │ │ ├── el-table │ │ │ ├── adaptive.js │ │ │ └── index.js │ │ ├── permission │ │ │ ├── index.js │ │ │ └── permission.js │ │ ├── sticky.js │ │ └── waves │ │ ├── index.js │ │ ├── waves.css │ │ └── waves.js │ ├── icons 应用中引用的图标文件 │ │ ├── avatar.gif │ │ ├── index.js │ │ ├── svg │ │ │ ├── analysis.svg │ │ │ ├── bfq.svg │ │ │ ├── cq.svg │ │ │ ├── crq.svg │ │ │ ├── dashboard.svg │ │ │ ├── exam.svg │ │ │ ├── example.svg │ │ │ ├── eye-open.svg │ │ │ ├── eye.svg │ │ │ ├── form.svg │ │ │ ├── link.svg │ │ │ ├── maq.svg │ │ │ ├── mcq.svg │ │ │ ├── nested.svg │ │ │ ├── password.svg │ │ │ ├── profile.svg │ │ │ ├── question.svg │ │ │ ├── server.svg │ │ │ ├── student.svg │ │ │ ├── table.svg │ │ │ ├── teacher.svg │ │ │ ├── tfq.svg │ │ │ ├── tree.svg │ │ │ └── user.svg │ │ └── svgo.yml │ ├── layout 界面的整体布局 │ │ ├── components │ │ │ ├── AppMain.vue 界面主体 │ │ │ ├── Navbar.vue 导航栏 │ │ │ ├── Sidebar 侧边栏 │ │ │ │ ├── FixiOSBug.js │ │ │ │ ├── Item.vue │ │ │ │ ├── Link.vue │ │ │ │ ├── Logo.vue │ │ │ │ ├── SidebarItem.vue │ │ │ │ └── index.vue │ │ │ └── index.js │ │ ├── index.vue │ │ └── mixin │ │ └── ResizeHandler.js │ ├── router 页面路由 │ │ └── index.js │ ├── store Vuex │ │ ├── getters.js │ │ ├── index.js │ │ └── modules │ │ ├── app.js │ │ ├── permission.js │ │ ├── settings.js │ │ └── user.js │ ├── styles 通用的样式文件 │ │ ├── btn.scss │ │ ├── element-ui.scss │ │ ├── element-variables.scss │ │ ├── index.scss │ │ ├── mixin.scss │ │ ├── sidebar.scss │ │ ├── transition.scss │ │ └── variables.scss │ ├── utils 辅助工具库 │ │ ├── Export2Excel.js │ │ ├── ImportFromExcel.js │ │ ├── cookie.js │ │ ├── get-page-title.js │ │ ├── index.js │ │ ├── request.js │ │ ├── scroll-to.js │ │ ├── time.js │ │ └── validate.js │ └── views 各个页面的界面主体 │ ├── 404.vue │ ├── dashboard 首页 │ │ └── index.vue │ ├── exam 考试管理 │ │ ├── chart.vue │ │ ├── detail.vue │ │ ├── index.vue │ │ └── resize.js │ ├── login 登录界面 │ │ └── index.vue │ ├── question 试题管理 │ │ ├── bfq.vue │ │ ├── common.js │ │ ├── cq.vue │ │ ├── crq.vue │ │ ├── maq.vue │ │ ├── mcq.vue │ │ └── tfq.vue │ ├── student 学生管理 │ │ └── index.vue │ └── teacher 教师管理 │ └── index.vue ├── LICENSE ├── babel.config.js ├── jest.config.js ├── jsconfig.json ├── package.json 项目依赖 ├── postcss.config.js └── vue.config.js 主要的开发工作在 views 目录下进行，这里的 Vue 文件是各个页面（考试管理、试题管理等）的界面主体（AppMain）。 Vue 文件的内容通常分为三个部分：类 html 的模板（template）、Javascript 编写的逻辑、样式。 因为各个页面的需求都很相似，所以各个 Vue 文件也很相似。 大多数页面的主体都是一个 El-Table。 我们在 El-Table 的左侧加一列多选框方便批量删除；第二列通常是数据的 id；表格的接下来几列展示对应数据的主要信息； 最后一列盛放编辑与删除按钮。 El-Table 的设计满含细节：启用斑马纹（stripe）以方便数行数，还禁止选中行以避免误导用户（批量删除要求选中 checkbox 而非选中行）， 列宽度根据实际情况设置，单元格通过 El-Tooltip 提供补充信息等。 基本上所有页面都有多个对话框（El-Dialog）。 每个 El-Dialog 都通过一个单独的布尔变量控制显示与否。El-Dialog 通常包含一个表单（或表格）和取消、确定按钮。 在这些页面被创建时（created() 方法），通常会通过 getList() 调用对应的 api 获取各自的数据， 数据随后被绑定为 El-Table 的 model。在分页器换页时与操作数据时也会进行这一流程。 在修改某条记录时，则会把要修改的数据拷贝到一个变量 temp 上，再弹出 El-Dialog 要求用户确认， temp 将被绑定为 El-Dialog 的 model；通过拷贝变量 temp，可以避免 El-Dialog 表单中的修改影响到 El-Table 中的只读数据。 Apache-2.0 Licensed | Copyright © 2022-present Euan Mactavish            Last Updated 2022-03-11 20:19 "},"design/student_client.html":{"url":"design/student_client.html","title":"学生客户端","keywords":"","body":"学生客户端的技术选型则有点变化。为了防作弊和整合编程题调试功能，学生客户端必须为 PC 端软件， 而不能向教师客户端一样采用浏览器平台。鉴于编程题为 Python 编程，PC 端实现最好也采用 Python 的技术栈。 因而基础框架选择的是 PyQt5，本来计划整个客户端都使用 PyQt 构建，但是中途发觉 Python 语言实在是不适合描述 UI。 Qt 还有一个 DSL 叫 QML，更适合描述 UI，但是这样一来只会让设计变得更加复杂。 最终方案是只使用 PyQt 来作为 PC 端平台，然后在其上用 Qt WebEngine 搭建浏览器平台， 这样就能使用已有的 vue-admin-template 构建主体应用。 而 Python 编程题的在线调试功能不能一并交给 Vue 应用，因为我们没有找到能在浏览器运行的 Javascript 实现的 Python 解释器， 所以只好让 Python 平台程序另外启动一个本地服务端，以处理调试请求。 我们没有采用 Qt WebChannel 的通信方案， 是因为它没有本地 Client/Server 的方案常用。 而为了避免直接向用户暴露 Python 源文件，更为了方便没有安装 Python 解释器的用户能直接使用客户端， 项目最终使用 PyInstaller 来作打包。 学生客户端的源码文件夹结构如下： . ├── pyqt Python 实现的程序平台 │ ├── Pipfile pipenv 的依赖文件 │ ├── Pipfile.lock 自动生成的 pipenv 依赖文件 │ ├── code_runner.py 用于编程题调试的 Python Code Runner │ ├── config.py 配置文件 │ ├── local_server.py 用于编程题调试的本地服务器 │ ├── main.py 程序入口 │ └── main.spec PyInstaller 的配置文件 └── vue Vue 部分 ├── LICENSE ├── babel.config.js ├── jest.config.js ├── jsconfig.json ├── package.json Vue 的项目依赖 ├── postcss.config.js ├── public 打包需要的静态文件 │ ├── favicon.ico 网页图标 │ └── index.html 单页 html ├── src 真正的源代码 │ ├── App.vue │ ├── main.js │ ├── permission.js 权限管理 │ ├── settings.js │ ├── api 单纯的 JS API 请求库 │ │ └── index.js │ ├── assets 应用中引用的静态文件 │ │ ├── 404_images │ │ │ ├── 404.png │ │ │ └── 404_cloud.png │ │ ├── logo.png │ │ └── tip_zoom.png │ ├── components 通用组件 │ │ ├── BackToTop │ │ │ └── index.vue │ │ └── SvgIcon │ │ └── index.vue │ ├── icons 应用中引用的图标文件 │ │ ├── avatar.gif │ │ ├── index.js │ │ ├── svg │ │ │ ├── exam.svg │ │ │ ├── id.svg │ │ │ ├── server.svg │ │ │ └── user.svg │ │ └── svgo.yml │ ├── layout 界面的整体布局 │ │ ├── components │ │ │ ├── AppMain.vue │ │ │ └── index.js │ │ ├── index.vue │ │ └── mixin │ │ └── ResizeHandler.js │ ├── router 页面路由 │ │ └── index.js │ ├── store Vuex │ │ ├── getters.js │ │ ├── index.js │ │ └── modules │ │ ├── settings.js │ │ └── user.js │ ├── styles 通用的样式文件 │ │ ├── btn.scss │ │ ├── element-ui.scss │ │ ├── element-variables.scss │ │ ├── index.scss │ │ ├── mixin.scss │ │ ├── sidebar.scss │ │ ├── transition.scss │ │ └── variables.scss │ ├── utils 辅助工具库 │ │ ├── cookie.js │ │ ├── get-page-title.js │ │ ├── index.js │ │ ├── random.js │ │ ├── request.js │ │ ├── scroll-to.js │ │ ├── time.js │ │ └── validate.js │ └── views 各个页面的界面主体 │ ├── 404.vue │ ├── home 主界面 │ │ └── index.vue │ └── login 登录界面 │ └── index.vue └── vue.config.js 学生客户端的 Vue 应用相对教师端更简单，只有登录界面与答题的主界面。 主界面使用一个 El-Tabs 承载所有的题目， 不同的题型被放在不同的 Tab。主界面在被创建时获取题目至 questions 变量， 而学生的作答对应的 model 为 answers 变量。应用每隔几分钟就将作答保存到服务端，这包括两个 API 调用： PUT exams/my_answers 会将作答提交至数据库，而 PUT cache 会将 answers 变量直接序列化成字符串保存到服务端的内存 Cache 中去； 后者是方便学生中途退出程序重进时，通过 GET cache 快速还原 answers 变量的状态。 设计的检查进度功能是通过一个按钮触发的，之所以不设计成一个常驻的实时展示进度的组件，是因为 answers 变量结构较复杂， 不适合通过 model 监听。 Python 部分主要是启动 Qt WebEngine 和本地服务端。 本地服务端选型是 Flask，在 http://localhost:2998 监听， 处理 PUT code 请求与静态文件请求。Flask 在单独的进程运行，与 PyQt 并行执行。 在处理 PUT code 请求时，程序使用 PyInstaller 打包好的单独的 Python 解释器执行用户代码，并按题目要求处理好输入输出与异常。 值得一提的是，编程题的对错就是在此时判定的，客户端判分必然是脆弱的、不安全的，但这也是受限于实际情境中服务器不足的性能的结果， 在重构时也许会考虑作出改变。 Apache-2.0 Licensed | Copyright © 2022-present Euan Mactavish            Last Updated 2022-03-11 21:07 "},"design/build.html":{"url":"design/build.html","title":"构建指南","keywords":"","body":"这里介绍如何从源代码构建系统。 源码的 build 文件夹中提供了 Windows 环境下用于自动构建的 bat 脚本， 进入目录双击运行即可。如果你需要在其他操作系统中手动完成构建， 或者想知道脚本的工作流程，请接着往下看。 服务端与教师客户端 教师客户端的单页 Web 应用就作为静态文件部署在服务端软件的同级目录下。 所以，直接访问服务端的 HTTP 根路径就会进入教师客户端，其他的大多数接口则是 RESTful 的。 教师客户端的 package.json 与 package-lock.json 记录着 Vue 应用的依赖。 通过 npm run build 即可自动下载依赖，完成构建。 构建得到的文件将位于 teacher_client/dist 下，它们是一个名为 static 的文件夹、一个 index.html 与一个 favicon.ico。 服务端软件的构建同样简单。 go.mod 与 go.sum 记录着 Go 软件的依赖。 只要在 server 目录下执行 go build 即可自动下载依赖，完成构建。 构建得到 EasyTesting 二进制文件（在 Windows 下是 EasyTesting.exe）。 新建一个文件夹存放它们的构建成果。注意，还需要拷贝一份服务端软件的配置文件 server-config.yaml。 为了方便用户部署服务端时顺便处理好数据库，我们还可拷贝一份 server 文件夹下的 sql 文件夹。 最后得到的文件夹结构将类似于： ├── EasyTesting 服务端主程序 ├── server-config.yaml 服务端主程序的配置文件 ├── favicon.ico 软件图标 ├── index.html 教师端主页面 ├── sql MySQL 脚本 │ ├── setup.sql 创建数据库的脚本 │ └── test.sql 插入测试数据的脚本 └── static 教师端主页面的静态文件 ├── css 样式文件 │ ├── app.4c2aef82.css │ ├── chunk-019156c7.a8088982.css │ ├── chunk-07c1fcd4.04dea0eb.css │ └── ... ├── fonts 字体文件 │ ├── element-icons.535877f5.woff │ └── element-icons.732389de.ttf ├── img 图片 │ ├── 404.a57b6f31.png │ ├── 404_cloud.0f4bc32b.png │ ├── avatar.ecba1844.gif │ └── ... └── js javascript 脚本文件 ├── app.82de0e6e.js ├── app.9d60ec40.js ├── chunk-019156c7.b0ca593f.js └── ... 学生客户端 相对而言，学生客户端的构建更加复杂。 首先我们需要从官网下载一份 Python 解释器，它将作为学生客户端的编程题运行环境。 默认构建使用的是 Python v3.7.9， Windows 环境下载 Windows x86-64 embeddable zip file，它已包含所需的解释器与标准库，我们并不需要包含 pip 等工具的完整版。 要把它解压得到的文件夹放到 student_client/pyqt 下。 然后要在 student_client/vue 下运行 npm run build 构建好 Vue 应用。 其构建成果与 teacher_client 类似。 接下来，我们需要把生成的 static 文件夹与另两个文件也放到 student_client/pyqt 下。 我们使用 PyInstaller 打包 PyQt，这样一来学生用户就无需自行安装 Python，更不需要操心依赖库。 PyInstaller 使用 student_client/pyqt/main.spec 作为配置文件， 其内容含义可参考官方文档。 我们主要修改两处地方，第一是创建 Analysis 对象的 datas 参数，我们提供包含四对元组的一个列表， 它表示将每个元组的第一个元素代表的文件或文件夹拷贝到打包后的文件夹内， 每个元组的第二个元素表示打包后的文件夹内的新文件或文件夹名。 这里，我们要求原样拷贝 favicon.ico、index.html 与 static 文件夹， 同时将 Python 解释器文件夹拷贝并重命名为 runner。 第二个修改的地方是创建 Analysis 对象的 pathex 参数，它告知 PyInstaller 从何处打包项目所需的依赖库。 PyQt 子项目使用 pipenv 管理依赖。 pipenv 根据 student_client/pyqt/Pipfile 的要求将依赖下载到本地，依赖的本地路径即为 pipenv --venv 命令的输出。 # main.spec # ... a = Analysis(['main.py'], # replace this with where your dependencies lay, i.e. your output for `pipenv --venv` pathex=['C:\\\\\\\\Users\\\\\\\\John Mactavish\\\\\\\\.virtualenvs\\\\\\\\pyqt-Jt_vAwyy'], # ... # data files copy, see documentation for details datas=[('favicon.ico','.'),('index.html','.'),('static','static'),('python-3.7.9-embed-amd64','runner')], # ... noarchive=False) # ... 这两项修改做好后，在 student_client/pyqt 目录下运行 pipenv run pyinstaller main.spec 即可在 student_client/pyqt/dist 中得到 打包后的文件夹 main。 Apache-2.0 Licensed | Copyright © 2022-present Euan Mactavish            Last Updated 2022-03-05 11:47 "}}